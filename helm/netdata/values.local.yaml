service:
  # type: ClusterIP
  type: LoadBalancer
  port: 19999
  annotations:
    metallb.universe.tf/allow-shared-ip: "192.168.86.220"
  ## Only to be used with type LoadBalancer
  # loadBalancerIP: 10.0.1.69
  # loadBalancerSourceRanges: []
  # externalTrafficPolicy: Local
  ## Only to be used with type LoadBalancer and external traffic policy Local
  # healthCheckNodePort:
  ## Only to be used with type ClusterIP
  # clusterIP: 10.1.2.3

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: traefik-external
    # kubernetes.io/tls-acme: "true"
  path: /
  pathType: Prefix
  hosts:
    - netdata.k8s.local
  # whole spec is going to be included into ingress spec.
  # if you intend to use ingressClassName declaration, remove ingress.class from annotations
  spec:
    # ingressClassName: nginx
  tls:
    # - secretName: netdata-tls
    #   hosts:
    #     - netdata.k8s.local

parent:
  livenessProbe:
    failureThreshold: 5
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 5
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1

  dnsPolicy: ""

  configs:
    health:
      enabled: true
      path: /etc/netdata/health_alarm_notify.conf
      data: |
        SEND_EMAIL="NO"
        SEND_SLACK="YES"
        SLACK_WEBHOOK_URL=${SLACK_APP_URL}
        DEFAULT_RECIPIENT_SLACK="alerts"
        role_recipients_slack[sysadmin]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[domainadmin]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[dba]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[webmaster]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[proxyadmin]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[sitemgr]="${DEFAULT_RECIPIENT_SLACK}"
    god-plugin:
      enabled: true
      path: /etc/netdata/health.d/go.d.plugin.conf
      data: |
        template: go.d_job_last_collected_secs
              on: netdata.go_plugin_execution_time
          class: Error
            type: Netdata
        component: go.d.plugin
          module: !* *
            calc: $now - $last_collected_t
          units: seconds ago
          every: 10s
            warn: $this > (($status >= $WARNING)  ? ($update_every) : ( 30 * $update_every))
            crit: $this > (($status == $CRITICAL) ? ($update_every) : (120 * $update_every))
          delay: down 5m multiplier 1.5 max 1h
            info: number of seconds since the last successful data collection
              to: webmaster

  claiming:
    enabled: true
    token: ${NETDATA_CLAIM_TOKEN}
    rooms: ""

child:
  livenessProbe:
    failureThreshold: 5 #
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 5 #
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1

  hostNetwork: true

  dnsPolicy: ClusterFirstWithHostNet

  configs:
    netdata:
      enabled: true
      path: /etc/netdata/netdata.conf
      data: |
        [global]
          memory mode = ram
          history = 14400
        [health]
          enabled = no
        [ml]
          enabled = yes

  claiming:
    enabled: true
    token: ${NETDATA_CLAIM_TOKEN}
    rooms: ""

