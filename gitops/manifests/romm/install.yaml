---
apiVersion: v1
kind: Namespace
metadata:
  name: romm
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: romm-resources-pvc
  namespace: romm
spec:
  accessModes: ["ReadWriteOnce"]
  storageClassName: nfs-csi-synologynas
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: romm-library-pvc
  namespace: romm
spec:
  accessModes: ["ReadWriteOnce"]
  storageClassName: nfs-csi-synologynas
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: romm-assets-pvc
  namespace: romm
spec:
  accessModes: ["ReadWriteOnce"]
  storageClassName: nfs-csi-synologynas
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: romm-config-pvc
  namespace: romm
spec:
  accessModes: ["ReadWriteOnce"]
  storageClassName: nfs-csi-synologynas
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: romm-env
  namespace: romm
data:
  ROMM_PORT: "8080"
  ROMM_DB_DRIVER: "postgresql"
  DB_HOST: "<path:secret/data/database#PG_HOST>"
  DB_PORT: "5432"
  DB_NAME: "romm"
  DB_USER: "<path:secret/data/database#PG_USER>"
  DB_PASSWD: "<path:secret/data/database#PG_PASSWORD>"
  REDIS_HOST: "<path:secret/data/database#REDIS_HOST>"
  REDIS_PASSWORD: "<path:secret/data/database#REDIS_PASSWORD>"
  REDIS_PORT: "6379"
  REDIS_DB: "1"
  ROMM_AUTH_SECRET_KEY: "<path:secret/data/argocd#ROMM_AUTH_SECRET_KEY>"
  IGDB_CLIENT_ID: "<path:secret/data/argocd#ROMM_IGDB_CLIENT_ID>"
  IGDB_CLIENT_SECRET: "<path:secret/data/argocd#ROMM_IGDB_CLIENT_SECRET>"
  # SCREENSCRAPER_USER: "path:secret/data/argocd#ROMM_SCREENSCRAPER_USER"
  # SCREENSCRAPER_PASSWORD: "path:secret/data/argocd#ROMM_SCREENSCRAPER_PASSWORD"
  # RETROACHIEVEMENTS_API_KEY: "path:secret/data/argocd#ROMM_RETROACHIEVEMENTS_API_KEY"
  # STEAMGRIDDB_API_KEY: "path:secret/data/argocd#ROMM_STEAMGRIDDB_API_KEY"
  HASHEOUS_API_ENABLED: "true"
  PLAYMATCH_API_ENABLED: "false"
  LAUNCHBOX_API_ENABLED: "false"
  LOGLEVEL: "INFO"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: romm-config-default
  namespace: romm
data:
  config.yml: |
    # This is a generic example of a configuration file
    # Rename this file to `config.yml`, copy it to a `config` folder, and mount that folder as per the docker-compose.example.yml
    # Only uncomment the lines you want to use/modify, or add new ones where needed

    exclude:
      # Exclude platforms to be scanned
      platforms: [] # ['my_excluded_platform_1', 'my_excluded_platform_2']

      # Exclude roms or parts of roms to be scanned
      roms:
        # Single file games section.
        # Will not apply to files that are in sub-folders (multi-disc roms, games with updates, DLC, patches, etc.)
        single_file:
          # Exclude all files with certain extensions to be scanned
          extensions: [] # ['xml', 'txt']

          # Exclude matched file names to be scanned.
          # Supports unix filename pattern matching
          # Can also exclude files by extension
          names: [] # ['info.txt', '._*', '*.nfo']

        # Multi files games section
        # Will apply to files that are in sub-folders (multi-disc roms, games with updates, DLC, patches, etc.)
        multi_file:
          # Exclude matched 'folder' names to be scanned (RomM identifies folders as multi file games)
          names: [] # ['my_multi_file_game', 'DLC']

          # Exclude files within sub-folders.
          parts:
            # Exclude matched file names to be scanned from multi file roms
            # Keep in mind that RomM doesn't scan folders inside multi files games,
            # so there is no need to exclude folders from inside of multi files games.
            names: [] # ['data.xml', '._*'] # Supports unix filename pattern matching

            # Exclude all files with certain extensions to be scanned from multi file roms
            extensions: [] # ['xml', 'txt']

    system:
      # Asociate different platform names to your current file system platform names
      # [your custom platform folder name]: [RomM platform name]
      # In this example if you have a 'gc' folder, RomM will treat it like the 'ngc' folder and if you have a 'psx' folder, RomM will treat it like the 'ps' folder
      platforms: {} # { gc: 'ngc', psx: 'ps' }

      # Asociate one platform to it's main version
      versions: {} # { naomi: 'arcade' }

    # The folder name where your roms are located
    filesystem: {} # { roms_folder: 'roms' } For example if your folder structure is /home/user/library/roms_folder
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: romm
  namespace: romm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: romm
  template:
    metadata:
      labels:
        app: romm
        app.kubernetes.io/name: romm
    spec:
      containers:
        - name: romm
          image: rommapp/romm:latest
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: romm-env
          volumeMounts:
            - name: resources
              mountPath: /romm/resources
            - name: library
              mountPath: /romm/library
            - name: assets
              mountPath: /romm/assets
            - name: config
              mountPath: /romm/config
            - name: config-default
              mountPath: /romm/config/config.yml
              subPath: config.yml
              readOnly: true
      volumes:
        - name: resources
          persistentVolumeClaim:
            claimName: romm-resources-pvc
        - name: library
          persistentVolumeClaim:
            claimName: romm-library-pvc
        - name: assets
          persistentVolumeClaim:
            claimName: romm-assets-pvc
        - name: config
          persistentVolumeClaim:
            claimName: romm-config-pvc
        - name: config-default
          configMap:
            name: romm-config-default
---
apiVersion: v1
kind: Service
metadata:
  name: romm
  namespace: romm
spec:
  selector:
    app: romm
  ports:
    - name: http
      port: 80
      targetPort: 8080
  type: ClusterIP
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: romm-internal
  namespace: romm
  annotations:
    kubernetes.io/ingress.class: traefik-external
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`romm.local.timmybtech.com`)
      kind: Rule
      services:
        - name: romm
          port: 80
  tls:
    secretName: local-timmybtech-com-tls
