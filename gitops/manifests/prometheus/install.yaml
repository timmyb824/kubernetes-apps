apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: default
    namespace: monitoring
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    app: prometheus-server
  name: prometheus-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: nfs-csi-synologynas
  volumeName: pvc-74b2d795-4984-43cd-b434-207afe78f3c3
  resources:
    requests:
      storage: "64Gi"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
  namespace: monitoring
data:
  # prometheus.rules: |-
  #   groups:
  #   - name: devopscube demo alert
  #     rules:
  #     - alert: High Pod Memory
  #       expr: sum(container_memory_usage_bytes) > 1
  #       for: 1m
  #       labels:
  #         severity: slack
  #       annotations:
  #         summary: High Memory Usage
  prometheus.yml: |-
    global:
      scrape_interval: 60s
      scrape_timeout: 55s

      external_labels:
        origin_prometheus: k3s-cluster

    #   evaluation_interval: 60s # how often rules in a group are evaluated
    # rule_files:
    #   - /etc/prometheus/prometheus.rules
    # alerting:
    #   alertmanagers:
    #   - scheme: http
    #     static_configs:
    #     - targets:
    #       - "alertmanager.monitoring.svc:9093"

    scrape_configs:
      # For Service discovery
      # - job_name: 'node-exporter'
      #   kubernetes_sd_configs:
      #     - role: endpoints
      #   relabel_configs:
      #   - source_labels: [__meta_kubernetes_endpoints_name]
      #     regex: 'node-exporter'
      #     action: keep

      # For Pod discovery
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
        - target_label: job
          replacement: node-exporter
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: "true"
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        # Overwrite the `instance` label with the node name
        - source_labels: [__meta_kubernetes_pod_node_name]
          target_label: instance
          action: replace
        - target_label: origin_prometheus
          replacement: k3s-cluster

      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']

      - job_name: 'kubernetes-cadvisor'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_name]
          regex: node-exporter
          action: drop
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name

      - job_name: "immich"
        scheme: https
        metrics_path: /metrics
        static_configs:
          - targets:
            - "immich-microservices-metrics.local.timmybtech.com"
            - "immich-api-metrics.local.timmybtech.com"
        tls_config:
          insecure_skip_verify: true
        relabel_configs:
          - source_labels: [__address__]
            regex: (immich-microservices-metrics.local.timmybtech.com|immich-api-metrics.local.timmybtech.com)
            target_label: instance

      - job_name: "authentik"
        scheme: https
        metrics_path: /metrics
        static_configs:
          - targets:
            - "authentik-metrics.local.timmybtech.com"
        tls_config:
          insecure_skip_verify: true
        relabel_configs:
          - source_labels: [__address__]
            regex: (authentik-metrics.local.timmybtech.com)
            target_label: instance

      - job_name: "registry"
        scheme: https
        metrics_path: /metrics
        static_configs:
          - targets:
            - "registry.local.timmybtech.com"
        tls_config:
          insecure_skip_verify: true
        relabel_configs:
          - source_labels: [__address__]
            regex: (registry.local.timmybtech.com)
            target_label: instance

      - job_name: "metallb"
        scheme: https
        metrics_path: /metrics
        static_configs:
          - targets:
            - "metallb-metrics.local.timmybtech.com"
        tls_config:
          insecure_skip_verify: true
        relabel_configs:
          - source_labels: [__address__]
            regex: (metallb-metrics.local.timmybtech.com)
            target_label: instance

      # - job_name: "crowdsec"
      #   scheme: https
      #   metrics_path: /metrics
      #   static_configs:
      #     - targets:
      #       - "crowdsec-metrics.local.timmybtech.com"
      #   tls_config:
      #     insecure_skip_verify: true
      #   relabel_configs:
      #     - source_labels: [__address__]
      #       regex: (crowdsec-metrics.local.timmybtech.com)
      #       target_label: instance

      # - job_name: "crowdsec-agent"
      #   scheme: https
      #   metrics_path: /metrics
      #   static_configs:
      #     - targets:
      #       - "crowdsec-agent-metrics.local.timmybtech.com"
      #   tls_config:
      #     insecure_skip_verify: true
      #   relabel_configs:
      #     - source_labels: [__address__]
      #       regex: (crowdsec-agent-metrics.local.timmybtech.com)
      #       target_label: instance

      - job_name: "coredns"
        scheme: http
        metrics_path: /metrics
        static_configs:
          - targets:
            - "192.168.86.220:9153"
        relabel_configs:
          - source_labels: [__address__]
            regex: (192.168.86.220:9153)
            target_label: instance

      - job_name: "rabbitmq"
        scheme: https
        metrics_path: /metrics
        static_configs:
          - targets:
            - "rabbitmq-metrics.local.timmybtech.com"
        tls_config:
          insecure_skip_verify: true
        relabel_configs:
          - source_labels: [__address__]
            regex: (rabbitmq-metrics.local.timmybtech.com)
            target_label: instance

      - job_name: "notifiq"
        scheme: https
        metrics_path: /metrics
        static_configs:
          - targets:
            - "notifiq.local.timmybtech.com"
        tls_config:
          insecure_skip_verify: true
        relabel_configs:
          - source_labels: [__address__]
            regex: (notifiq.local.timmybtech.com)
            target_label: instance
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: monitoring
  labels:
    app: prometheus-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v3.4.2
          args:
            - "--storage.tsdb.retention.time=12h"
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
          ports:
            - containerPort: 9090
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 1
              memory: 2Gi
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
      volumes:
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: prometheus-server-conf

        - name: prometheus-storage-volume
          persistentVolumeClaim:
            claimName: prometheus-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  selector:
    app: prometheus-server
  ports:
    - port: 8080
      targetPort: 9090
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: prometheus-ingress
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: traefik-external
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`prometheus-k8s.local.timmybtech.com`)
      kind: Rule
      services:
        - name: prometheus-service
          port: 8080
  tls:
    secretName: local-timmybtech-com-tls
