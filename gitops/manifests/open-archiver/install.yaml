apiVersion: v1
kind: Namespace
metadata:
  name: open-archiver
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: open-archiver-config
  namespace: open-archiver
data:
  # --- Application Settings ---
  NODE_ENV: "development"
  PORT_BACKEND: "4000"
  PORT_FRONTEND: "3000"
  SYNC_FREQUENCY: "*/5 * * * *"
  DATABASE_URL: "postgresql://<path:secret/data/postgres_db#USER>:<path:secret/data/postgres_db#PASSWORD>@<path:secret/data/postgres_db#HOST_IP>:5432/open_archive"
  # --- Meilisearch ---
  MEILI_MASTER_KEY: "<path:secret/data/database#MEILISEARCH_MASTER_KEY>"
  MEILI_HOST: "http://<path:secret/data/database#MEILISEARCH_HOST>:7700"
  # --- Redis / Valkey ---
  REDIS_HOST: "<path:secret/data/database#REDIS_HOST>"
  REDIS_PORT: "6379"
  REDIS_PASSWORD: "<path:secret/data/database#REDIS_PASSWORD>"
  REDIS_TLS_ENABLED: "false"
  # --- Storage Settings ---
  STORAGE_TYPE: "local"
  BODY_SIZE_LIMIT: "100M"
  STORAGE_LOCAL_ROOT_PATH: "/var/data/open-archiver"
  # --- Security / Auth ---
  RATE_LIMIT_WINDOW_MS: "60000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  JWT_SECRET: "<path:secret/data/argocd#OPENARCHIVER_JWT_SECRET>"
  JWT_EXPIRES_IN: "7d"
  ENCRYPTION_KEY: "<path:secret/data/argocd#OPENARCHIVER_ENCRYPTION_KEY>"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: archiver-data
  namespace: open-archiver
spec:
  accessModes: ["ReadWriteOnce"]
  storageClassName: "nfs-csi-synologynas"
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open-archiver
  namespace: open-archiver
  labels:
    app: open-archiver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: open-archiver
  template:
    metadata:
      labels:
        app: open-archiver
        app.kubernetes.io/name: open-archiver
    spec:
      containers:
        - name: open-archiver
          image: logiclabshq/open-archiver:latest
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: open-archiver-config
          ports:
            - name: frontend
              containerPort: 3000
            - name: backend
              containerPort: 4000
          volumeMounts:
            - name: data
              mountPath: /var/data/open-archiver
          readinessProbe:
            httpGet:
              path: /
              port: frontend
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
          livenessProbe:
            httpGet:
              path: /
              port: frontend
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 3
          resources:
            requests:
              memory: "64Mi"
              cpu: "256m"
            limits:
              memory: "128Mi"
              cpu: "512m"
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: archiver-data
---
apiVersion: v1
kind: Service
metadata:
  name: open-archiver
  namespace: open-archiver
  labels:
    app: open-archiver
spec:
  selector:
    app: open-archiver
  ports:
    - name: http
      port: 3000
      targetPort: 3000
  type: ClusterIP
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: open-archiver-internal
  namespace: open-archiver
  annotations:
    kubernetes.io/ingress.class: traefik-external
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`open-archiver.local.timmybtech.com`)
      kind: Rule
      services:
        - name: open-archiver
          port: 3000
  tls:
    secretName: local-timmybtech-com-tls
