---
apiVersion: v1
kind: Namespace
metadata:
  name: umami
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations: {}
  labels:
    io.kompose.service: umami
  name: umami
  namespace: umami
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: umami
  template:
    metadata:
      annotations:
        avp.kubernetes.io/path: "secret/data/umami"
      labels:
        io.kompose.service: umami
        app.kubernetes.io/name: umami
    spec:
      containers:
        - env:
            - name: APP_SECRET
              value: <path:secret/data/umami#APP_SECRETL>
            - name: DATABASE_TYPE
              value: postgresql
            - name: DATABASE_URL
              value: <path:secret/data/umami#PG_URL>
          image: ghcr.io/umami-software/umami:postgresql-latest
          livenessProbe:
            exec:
              command:
                - curl http://localhost:3000/api/heartbeat
            failureThreshold: 5
            periodSeconds: 5
            timeoutSeconds: 5
          name: umami
          ports:
            - containerPort: 3000
              hostPort: 3000
              protocol: TCP
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  namespace: umami
  labels:
    io.kompose.service: umami
  name: umami
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    io.kompose.service: umami
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: umami-ingress
  namespace: umami
  annotations:
    kubernetes.io/ingress.class: traefik-external
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`umami.local.timmybtech.com`)
      kind: Rule
      services:
        - name: umami
          port: 3000
  tls:
    secretName: local-timmybtech-com-tls
---
apiVersion: v1
kind: Secret
metadata:
  annotations: {}
  name: tunnel-credentials
type: Opaque
stringData:
  credentials.json: >-
    <path:secret/data/cloudflared#UMAMI_CREDENTIALS>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: umami
spec:
  selector:
    matchLabels:
      app: cloudflared
  replicas: 2 # You could also consider elastic scaling for this deployment
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      containers:
      - name: cloudflared
        image: cloudflare/cloudflared:2024.1.5
        args:
        - tunnel
        # Points cloudflared to the config file, which configures what
        # cloudflared will actually do. This file is created by a ConfigMap
        # below.
        - --config
        - /etc/cloudflared/config/config.yaml
        - run
        livenessProbe:
          httpGet:
            # Cloudflared has a /ready endpoint which returns 200 if and only if
            # it has an active connection to the edge.
            path: /ready
            port: 2000
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: /etc/cloudflared/config
          readOnly: true
        # Each tunnel has an associated "credentials file" which authorizes machines
        # to run the tunnel. cloudflared will read this file from its local filesystem,
        # and it'll be stored in a k8s secret.
        - name: creds
          mountPath: /etc/cloudflared/creds
          readOnly: true
      volumes:
      - name: creds
        secret:
          # By default, the credentials file will be created under ~/.cloudflared/<tunnel ID>.json
          # when you run `cloudflared tunnel create`. You can move it into a secret by using:
          # ```sh
          # kubectl create secret generic tunnel-credentials \
          # --from-file=credentials.json=/Users/yourusername/.cloudflared/<tunnel ID>.json
          # ```
          secretName: tunnel-credentials
      # Create a config.yaml file from the ConfigMap below.
      - name: config
        configMap:
          name: cloudflared
          items:
          - key: config.yaml
            path: config.yaml
---
# This ConfigMap is just a way to define the cloudflared config.yaml file in k8s.
# It's useful to define it in k8s, rather than as a stand-alone .yaml file, because
# this lets you use various k8s templating solutions (e.g. Helm charts) to
# parameterize your config, instead of just using string literals.
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared
  namespace: umami
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: umami
    credentials-file: /etc/cloudflared/creds/credentials.json
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
    # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
    # recommend using autoupdate.
    no-autoupdate: true
    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    #
    # Remember, these rules route traffic from cloudflared to a local service. To route traffic
    # from the internet to cloudflared, run `cloudflared tunnel route dns <tunnel> <hostname>`.
    # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
    ingress:
    - hostname: umami.timmybtech.com
      service: http://umami.umami.svc.cluster.local:3000
    # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
    - service: http_status:404
