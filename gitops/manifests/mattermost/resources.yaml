apiVersion: v1
kind: Secret
metadata:
  name: mattermost-postgres-connection
  namespace: mattermost
type: Opaque
stringData:
  DB_CONNECTION_STRING: <path:secret/data/database#PG_CONN_STRING>/mattermost?sslmode=disable
---
apiVersion: v1
kind: Secret
metadata:
  name: mattermost-s3-credentials
  namespace: mattermost
type: Opaque
stringData:
  accesskey: <path:secret/data/argocd#MINIO_ACCESS_KEY>
  secretkey: <path:secret/data/argocd#MINIO_SECRET_KEY>
---
apiVersion: installation.mattermost.com/v1beta1
kind: Mattermost
metadata:
  name: mattermost
  namespace: mattermost
spec:
  size: 100users
  ingress:
    enabled: false
    host: mattermost.timmybtech.com
    annotations:
      kubernetes.io/ingress.class: traefik-external
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
  database:
    external:
      secret: mattermost-postgres-connection
  fileStore:
    external:
      url: minio.local.timmybtech.com
      bucket: mattermost
      secret: mattermost-s3-credentials
version: 10.7.0
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: mattermost-ingress
  namespace: mattermost
  annotations:
    kubernetes.io/ingress.class: traefik-external
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`mattermost.local.timmybtech.com`)
      kind: Rule
      services:
        - name: mattermost
          port: 8065
  tls:
    secretName: local-timmybtech-com-tls
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: mattermost-metrics-ingress
  namespace: mattermost
  annotations:
    kubernetes.io/ingress.class: traefik-external
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`mattermost-metrics.local.timmybtech.com`)
      kind: Rule
      services:
        - name: mattermost
          port: 8067
  tls:
    secretName: local-timmybtech-com-tls
---
apiVersion: v1
kind: Secret
metadata:
  name: tunnel-credentials
  namespace: mattermost
type: Opaque
stringData:
  credentials.json: >-
    <path:secret/data/cloudflared#MATTERMOST_CREDENTIALS>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: mattermost
spec:
  selector:
    matchLabels:
      app: cloudflared
  replicas: 2 # You could also consider elastic scaling for this deployment
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      containers:
        - name: cloudflared
          image: cloudflare/cloudflared:2025.2.1
          args:
            - tunnel
            # Points cloudflared to the config file, which configures what
            # cloudflared will actually do. This file is created by a ConfigMap
            # below.
            - --config
            - /etc/cloudflared/config/config.yaml
            - run
          livenessProbe:
            httpGet:
              # Cloudflared has a /ready endpoint which returns 200 if and only if
              # it has an active connection to the edge.
              path: /ready
              port: 2000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: config
              mountPath: /etc/cloudflared/config
              readOnly: true
            # Each tunnel has an associated "credentials file" which authorizes machines
            # to run the tunnel. cloudflared will read this file from its local filesystem,
            # and it'll be stored in a k8s secret.
            - name: creds
              mountPath: /etc/cloudflared/creds
              readOnly: true
      volumes:
        - name: creds
          secret:
            # By default, the credentials file will be created under ~/.cloudflared/[tunnel ID].json
            # when you run `cloudflared tunnel create`. You can move it into a secret by using:
            # ```sh
            # kubectl create secret generic tunnel-credentials \
            # --from-file=credentials.json=/Users/yourusername/.cloudflared/[tunnel ID].json
            # ```
            secretName: tunnel-credentials
        # Create a config.yaml file from the ConfigMap below.
        - name: config
          configMap:
            name: cloudflared
            items:
              - key: config.yaml
                path: config.yaml
---
# This ConfigMap is just a way to define the cloudflared config.yaml file in k8s.
# It's useful to define it in k8s, rather than as a stand-alone .yaml file, because
# this lets you use various k8s templating solutions (e.g. Helm charts) to
# parameterize your config, instead of just using string literals.
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared
  namespace: mattermost
data:
  config.yaml: |
    tunnel: mattermost
    credentials-file: /etc/cloudflared/creds/credentials.json
    metrics: 0.0.0.0:2000
    no-autoupdate: true
    ingress:
    - hostname: mattermost.timmybtech.com
      service: http://mattermost.mattermost.svc.cluster.local:8065
    - service: http_status:404
---
apiVersion: v1
kind: Service
metadata:
  name: cloudflared
  namespace: mattermost
spec:
  selector:
    app: cloudflared
  ports:
    - port: 2000
      protocol: TCP
      targetPort: 2000
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: cloudflared-ingress
  namespace: mattermost
  annotations:
    kubernetes.io/ingress.class: traefik-external
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`cf-mattermost.local.timmybtech.com`)
      kind: Rule
      services:
        - name: cloudflared
          port: 2000
  tls:
    secretName: local-timmybtech-com-tls
