---
apiVersion: v1
kind: Namespace
metadata:
  name: registry
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: registry-pvc
  namespace: registry
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 24Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry-server
  namespace: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: registry-server
  template:
    metadata:
      labels:
        app: registry-server
        app.kubernetes.io/name: registry-server
    spec:
      containers:
        - name: registry
          image: registry:2.8.3
          imagePullPolicy: IfNotPresent
          env:
            - name: REGISTRY_HTTP_HEADERS_Access-Control-Allow-Origin
              value: "[http://registry.local.timmybtech.com,https://registry.local.timmybtech.com]"
            - name: REGISTRY_HTTP_HEADERS_Access-Control-Allow-Methods
              value: "[HEAD,GET,OPTIONS,DELETE,PUT,POST]"
            - name: REGISTRY_HTTP_HEADERS_Access-Control-Allow-Credentials
              value: "[true]"
            - name: REGISTRY_HTTP_HEADERS_Access-Control-Allow-Headers
              value: "[Authorization,Accept,Cache-Control]"
            - name: REGISTRY_HTTP_HEADERS_Access-Control-Expose-Headers
              value: "[Docker-Content-Digest]"
            - name: REGISTRY_STORAGE_DELETE_ENABLED
              value: "true"
            - name: REGISTRY_HTTP_SECRET
              value: "<path:secret/data/argocd#REGISTRY_HTTP_SECRET>"
            - name: REGISTRY_LOG_LEVEL
              value: "info"
          volumeMounts:
            - name: registry-storage
              mountPath: /var/lib/registry
          ports:
            - containerPort: 5000
              name: http
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
      volumes:
        - name: registry-storage
          persistentVolumeClaim:
            claimName: registry-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: registry-server
  namespace: registry
spec:
  selector:
    app: registry-server
  ports:
    - port: 5000
      targetPort: http
      protocol: TCP
      name: http
  type: ClusterIP

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: registry-ingress
  namespace: registry
  annotations:
    kubernetes.io/ingress.class: traefik-external
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`registry.local.timmybtech.com`)
      kind: Rule
      services:
        - name: registry-server
          port: 5000
  tls:
    secretName: local-timmybtech-com-tls
###### TAILSCALE ######

# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: registry-server
#   namespace: registry
#   annotations: {}
# spec:
#   ingressClassName: tailscale
#   defaultBackend:
#     service:
#       name: registry-server
#       port:
#         number: 5000
#   tls:
#     - hosts:
#         - registry-server

###### CLOUDFLARED ######

# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: tunnel-credentials
#   namespace: registry
# type: Opaque
# stringData:
#   credentials.json: >-
#     <path:secret/data/cloudflared#REGISTRY_CREDENTIALS>

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: cloudflared
#   namespace: registry
# spec:
#   selector:
#     matchLabels:
#       app: cloudflared
#   replicas: 2 # You could also consider elastic scaling for this deployment
#   template:
#     metadata:
#       labels:
#         app: cloudflared
#     spec:
#       containers:
#         - name: cloudflared
#           image: cloudflare/cloudflared:2024.10.0
#           args:
#             - tunnel
#             # Points cloudflared to the config file, which configures what
#             # cloudflared will actually do. This file is created by a ConfigMap
#             # below.
#             - --config
#             - /etc/cloudflared/config/config.yaml
#             - run
#           livenessProbe:
#             httpGet:
#               # Cloudflared has a /ready endpoint which returns 200 if and only if
#               # it has an active connection to the edge.
#               path: /ready
#               port: 2000
#             failureThreshold: 1
#             initialDelaySeconds: 10
#             periodSeconds: 10
#           volumeMounts:
#             - name: config
#               mountPath: /etc/cloudflared/config
#               readOnly: true
#             # Each tunnel has an associated "credentials file" which authorizes machines
#             # to run the tunnel. cloudflared will read this file from its local filesystem,
#             # and it'll be stored in a k8s secret.
#             - name: creds
#               mountPath: /etc/cloudflared/creds
#               readOnly: true
#       volumes:
#         - name: creds
#           secret:
#             # By default, the credentials file will be created under ~/.cloudflared/[tunnel ID].json
#             # when you run `cloudflared tunnel create`. You can move it into a secret by using:
#             # ```sh
#             # kubectl create secret generic tunnel-credentials \
#             # --from-file=credentials.json=/Users/yourusername/.cloudflared/[tunnel ID].json
#             # ```
#             secretName: tunnel-credentials
#         # Create a config.yaml file from the ConfigMap below.
#         - name: config
#           configMap:
#             name: cloudflared
#             items:
#               - key: config.yaml
#                 path: config.yaml

# ---
# # This ConfigMap is just a way to define the cloudflared config.yaml file in k8s.
# # It's useful to define it in k8s, rather than as a stand-alone .yaml file, because
# # this lets you use various k8s templating solutions (e.g. Helm charts) to
# # parameterize your config, instead of just using string literals.
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: cloudflared
#   namespace: registry
# data:
#   config.yaml: |
#     # Name of the tunnel you want to run
#     tunnel: registry
#     credentials-file: /etc/cloudflared/creds/credentials.json
#     # Serves the metrics server under /metrics and the readiness server under /ready
#     metrics: 0.0.0.0:2000
#     # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
#     # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
#     # recommend using autoupdate.
#     no-autoupdate: true
#     # The `ingress` block tells cloudflared which local service to route incoming
#     # requests to. For more about ingress rules, see
#     # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
#     #
#     # Remember, these rules route traffic from cloudflared to a local service. To route traffic
#     # from the internet to cloudflared, run `cloudflared tunnel route dns [tunnel] [hostname]`.
#     # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
#     ingress:
#     - hostname: registry.timmybtech.com
#       service: http://registry-server.registry.svc.cluster.local:5000
#     # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
#     - service: http_status:404
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: cloudflared
#   namespace: registry
# spec:
#   selector:
#     app: cloudflared
#   ports:
#     - port: 2000
#       protocol: TCP
#       targetPort: 2000

# ---
# apiVersion: traefik.io/v1alpha1
# kind: IngressRoute
# metadata:
#   name: cloudflared-ingress
#   namespace: registry
#   annotations:
#     kubernetes.io/ingress.class: traefik-external
#     traefik.ingress.kubernetes.io/router.entrypoints: websecure
# spec:
#   entryPoints:
#     - websecure
#   routes:
#     - match: Host(`cf-registry.local.timmybtech.com`)
#       kind: Rule
#       services:
#         - name: cloudflared
#           port: 2000
#   tls:
#     secretName: local-timmybtech-com-tls
