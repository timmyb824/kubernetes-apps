apiVersion: v1
kind: Namespace
metadata:
  name: hoarder
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-pvc
  namespace: hoarder
spec:
  storageClassName: "nfs-csi-synologynas"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 16Gi
---
apiVersion: v1
data:
  DISABLE_SIGNUPS: "true"
  MEILI_MASTER_KEY: <path:secret/data/argocd#HOARDER_MEILI_MASTER_KEY>
  NEXTAUTH_SECRET: <path:secret/data/argocd#HOARDER_NEXTAUTH_SECRET>
  NEXTAUTH_URL: https://hoarder.timmybtech.com
  OAUTH_ALLOW_DANGEROUS_EMAIL_ACCOUNT_LINKING: "true"
  OAUTH_CLIENT_ID: <path:secret/data/argocd#AUTHENTIK_HOARDER_CLIENT_ID>
  OAUTH_CLIENT_SECRET: <path:secret/data/argocd#AUTHENTIK_HOARDER_SECRET_ID>
  OAUTH_PROVIDER_NAME: authentik
  OAUTH_WELLKNOWN_URL: <path:secret/data/argocd#HOARDER_AUTHENTIK_WELLKNOWN_URL>
  OPENAI_API_KEY: <path:secret/data/argocd#OPENAI_API_KEY>
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: hoarder-env
  namespace: hoarder
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: hoarder
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hoarder-web
  template:
    metadata:
      labels:
        app: hoarder-web
    spec:
      containers:
        - name: web
          image: ghcr.io/hoarder-app/hoarder:0.22.0
          ports:
            - containerPort: 3000
          env:
            - name: MEILI_ADDR
              value: http://meilisearch:7700
            - name: BROWSER_WEB_URL
              value: http://chrome:9222
            - name: DATA_DIR
              value: /data
          volumeMounts:
            - mountPath: /data
              name: data
          envFrom:
            - configMapRef:
                name: hoarder-env
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  selector:
    app: hoarder-web
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: hoarder-ingress
  namespace: hoarder
  annotations:
    kubernetes.io/ingress.class: traefik-external
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`hoarder.local.timmybtech.com`)
      kind: Rule
      services:
        - name: web
          port: 3000
      middlewares:
        - name: crowdsec-bouncer
          namespace: traefik
  tls:
    secretName: local-timmybtech-com-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chrome
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chrome
  template:
    metadata:
      labels:
        app: chrome
    spec:
      containers:
        - name: chrome
          image: gcr.io/zenika-hub/alpine-chrome:124
          command:
            - chromium-browser
            - --headless
            - --no-sandbox
            - --disable-gpu
            - --disable-dev-shm-usage
            - --remote-debugging-address=0.0.0.0
            - --remote-debugging-port=9222
            - --hide-scrollbars
---
apiVersion: v1
kind: Service
metadata:
  name: chrome
spec:
  selector:
    app: chrome
  ports:
    - protocol: TCP
      port: 9222
      targetPort: 9222
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: meilisearch-pvc
spec:
  storageClassName: "nfs-csi-synologynas"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meilisearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meilisearch
  template:
    metadata:
      labels:
        app: meilisearch
    spec:
      containers:
        - name: meilisearch
          image: getmeili/meilisearch:v1.12.8
          env:
            - name: MEILI_NO_ANALYTICS
              value: "true"
          volumeMounts:
            - mountPath: /meili_data
              name: meilisearch
          envFrom:
            - configMapRef:
                name: hoarder-env
      volumes:
        - name: meilisearch
          persistentVolumeClaim:
            claimName: meilisearch-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: meilisearch
spec:
  selector:
    app: meilisearch
  ports:
    - protocol: TCP
      port: 7700
      targetPort: 7700
---
apiVersion: v1
kind: Secret
metadata:
  name: tunnel-credentials
  namespace: hoarder
type: Opaque
stringData:
  credentials.json: >-
    <path:secret/data/cloudflared#HOARDER_CREDENTIALS>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: hoarder
spec:
  selector:
    matchLabels:
      app: cloudflared
  replicas: 2 # You could also consider elastic scaling for this deployment
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      containers:
        - name: cloudflared
          image: cloudflare/cloudflared:2025.2.1
          args:
            - tunnel
            # Points cloudflared to the config file, which configures what
            # cloudflared will actually do. This file is created by a ConfigMap
            # below.
            - --config
            - /etc/cloudflared/config/config.yaml
            - run
          livenessProbe:
            httpGet:
              # Cloudflared has a /ready endpoint which returns 200 if and only if
              # it has an active connection to the edge.
              path: /ready
              port: 2000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: config
              mountPath: /etc/cloudflared/config
              readOnly: true
            # Each tunnel has an associated "credentials file" which authorizes machines
            # to run the tunnel. cloudflared will read this file from its local filesystem,
            # and it'll be stored in a k8s secret.
            - name: creds
              mountPath: /etc/cloudflared/creds
              readOnly: true
      volumes:
        - name: creds
          secret:
            # By default, the credentials file will be created under ~/.cloudflared/[tunnel ID].json
            # when you run `cloudflared tunnel create`. You can move it into a secret by using:
            # ```sh
            # kubectl create secret generic tunnel-credentials \
            # --from-file=credentials.json=/Users/yourusername/.cloudflared/[tunnel ID].json
            # ```
            secretName: tunnel-credentials
        # Create a config.yaml file from the ConfigMap below.
        - name: config
          configMap:
            name: cloudflared
            items:
              - key: config.yaml
                path: config.yaml
---
# This ConfigMap is just a way to define the cloudflared config.yaml file in k8s.
# It's useful to define it in k8s, rather than as a stand-alone .yaml file, because
# this lets you use various k8s templating solutions (e.g. Helm charts) to
# parameterize your config, instead of just using string literals.
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared
  namespace: hoarder
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: hoarder
    credentials-file: /etc/cloudflared/creds/credentials.json
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
    # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
    # recommend using autoupdate.
    no-autoupdate: true
    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    #
    # Remember, these rules route traffic from cloudflared to a local service. To route traffic
    # from the internet to cloudflared, run `cloudflared tunnel route dns [tunnel] [hostname]`.
    # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
    ingress:
    - hostname: hoarder.timmybtech.com
      service: http://web.hoarder.svc.cluster.local:3000
    # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
    - service: http_status:404
---
apiVersion: v1
kind: Service
metadata:
  name: cloudflared
  namespace: hoarder
spec:
  selector:
    app: cloudflared
  ports:
    - port: 2000
      protocol: TCP
      targetPort: 2000
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: cloudflared-ingress
  namespace: hoarder
  annotations:
    kubernetes.io/ingress.class: traefik-external
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`cf-hoarder.local.timmybtech.com`)
      kind: Rule
      services:
        - name: cloudflared
          port: 2000
  tls:
    secretName: local-timmybtech-com-tls
