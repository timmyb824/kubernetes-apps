apiVersion: v1
kind: Namespace
metadata:
  name: cloudflared
---
apiVersion: v1
kind: Secret
metadata:
  name: tunnel-credentials
  namespace: cloudflared
type: Opaque
stringData:
  credentials.json: >-
    <path:secret/data/cloudflared#HOMELAB_CREDENTIALS>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: cloudflared
spec:
  selector:
    matchLabels:
      app: cloudflared
  replicas: 2
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      containers:
        - name: cloudflared
          image: cloudflare/cloudflared:2025.4.2
          args:
            - tunnel
            - --config
            - /etc/cloudflared/config/config.yaml
            - run
          livenessProbe:
            httpGet:
              path: /ready
              port: 2000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: config
              mountPath: /etc/cloudflared/config
              readOnly: true
            - name: creds
              mountPath: /etc/cloudflared/creds
              readOnly: true
      volumes:
        - name: creds
          secret:
            secretName: tunnel-credentials
        - name: config
          configMap:
            name: cloudflared
            items:
              - key: config.yaml
                path: config.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared
  namespace: cloudflared
data:
  config.yaml: |
    tunnel: homelab
    credentials-file: /etc/cloudflared/creds/credentials.json
    metrics: 0.0.0.0:2000
    no-autoupdate: true
    ingress:
    - hostname: authentik.timmybtech.com
      service: https://traefik.traefik.svc.cluster.local:443
      originRequest:
        noTLSVerify: true
        headers:
          X-Forwarded-Proto: https
    - hostname: authentik-outpost.timmybtech.com
      service: https://traefik.traefik.svc.cluster.local:443
      originRequest:
        noTLSVerify: true
        headers:
          X-Forwarded-Proto: https
    - hostname: docmost.timmybtech.com
      service: https://traefik.traefik.svc.cluster.local:443
      originRequest:
        noTLSVerify: true
        headers:
          X-Forwarded-Proto: https
    - hostname: grafana.timmybtech.com
      service: https://traefik.traefik.svc.cluster.local:443
      originRequest:
        noTLSVerify: true
        headers:
          X-Forwarded-Proto: https
    - hostname: hoarder.timmybtech.com
      service: https://traefik.traefik.svc.cluster.local:443
      originRequest:
        noTLSVerify: true
        headers:
          X-Forwarded-Proto: https
    - hostname: immich.timmybtech.com
      service: https://traefik.traefik.svc.cluster.local:443
      originRequest:
        noTLSVerify: true
        headers:
          X-Forwarded-Proto: https
    - hostname: mattermost.timmybtech.com
      service: https://traefik.traefik.svc.cluster.local:443
      originRequest:
        noTLSVerify: true
        headers:
          X-Forwarded-Proto: https
    - hostname: n8n.timmybtech.com
      service: https://traefik.traefik.svc.cluster.local:443
      originRequest:
        noTLSVerify: true
        headers:
          X-Forwarded-Proto: https
    - hostname: ntfy.timmybtech.com
      service: https://traefik.traefik.svc.cluster.local:443
      originRequest:
        noTLSVerify: true
        headers:
          X-Forwarded-Proto: https
    - hostname: umami.timmybtech.com
      service: https://traefik.traefik.svc.cluster.local:443
      originRequest:
        noTLSVerify: true
        headers:
          X-Forwarded-Proto: https
    - service: http_status:404
---
apiVersion: v1
kind: Service
metadata:
  name: cloudflared
  namespace: cloudflared
spec:
  selector:
    app: cloudflared
  ports:
    - port: 2000
      protocol: TCP
      targetPort: 2000
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: cloudflared-ingress
  namespace: cloudflared
  annotations:
    kubernetes.io/ingress.class: traefik-external
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`cloudflared.local.timmybtech.com`)
      kind: Rule
      services:
        - name: cloudflared
          port: 2000
  tls:
    secretName: local-timmybtech-com-tls
