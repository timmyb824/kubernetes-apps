apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: immich
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/compare-options: IgnoreExtraneous=true
spec:
  destination:
    namespace: immich
    server: "https://kubernetes.default.svc"
  project: default
  sources:
    - repoURL: https://immich-app.github.io/immich-charts
      targetRevision: 0.9.0
      chart: immich
      helm:
        releaseName: immich
        values: |
          ## This chart relies on the common library chart from bjw-s
          ## You can find it at https://github.com/bjw-s/helm-charts/tree/main/charts/library/common
          ## Refer there for more detail about the supported values

          # These entries are shared between all the Immich components

          env:
            REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
            DB_HOSTNAME: <path:secret/data/postgres_db#HOST_NAME>
            DB_USERNAME: <path:secret/data/postgres_db#USER>
            DB_DATABASE_NAME: "immich"
            # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
            DB_PASSWORD: <path:secret/data/postgres_db#PASSWORD>
            DB_VECTOR_EXTENSION: "pgvector"
            IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'

          image:
            tag: v1.124.0

          immich:
            metrics:
              # Enabling this will create the service monitors needed to monitor immich with the prometheus operator
              enabled: true
            persistence:
              # Main data store for all photos shared between different components.
              library:
                # Automatically creating the library volume is not supported by this chart
                # You have to specify an existing PVC to use
                existingClaim: immich-library-pvc
            # configuration is immich-config.json converted to yaml
            # ref: https://immich.app/docs/install/config-file/
            #
            configuration: {}
              # trash:
              #   enabled: false
              #   days: 30
              # storageTemplate:
              #   enabled: true
              #   template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"

          # Dependencies

          postgresql:
            enabled: false  # Disable the included PostgreSQL since we're using external
            image:
              repository: tensorchord/pgvecto-rs
              tag: pg14-v0.2.0
            global:
              postgresql:
                auth:
                  username: <path:secret/data/postgres_db#USER>
                  database: immich
                  password: <path:secret/data/postgres_db#PASSWORD>
            primary:
              containerSecurityContext:
                readOnlyRootFilesystem: false
              initdb:
                scripts:
                  create-extensions.sql: |
                    CREATE EXTENSION cube;
                    CREATE EXTENSION earthdistance;
                    CREATE EXTENSION vectors;

          redis:
            enabled: true
            architecture: standalone
            auth:
              enabled: false

          # Immich components

          server:
            enabled: true
            image:
              repository: ghcr.io/immich-app/immich-server
              pullPolicy: IfNotPresent
            ingress:
              main:
                enabled: false
                annotations:
                  # proxy-body-size is set to 0 to remove the body limit on file uploads
                  nginx.ingress.kubernetes.io/proxy-body-size: "0"
                hosts:
                  - host: immich.local
                    paths:
                      - path: "/"
                tls: []

          machine-learning:
            enabled: true
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              pullPolicy: IfNotPresent
            env:
              TRANSFORMERS_CACHE: /cache
            persistence:
              cache:
                enabled: true
                size: 10Gi
                # Optional: Set this to pvc to avoid downloading the ML models every start.
                type: pvc
                accessMode: ReadWriteMany
                storageClass: nfs-csi-synologynas

    - repoURL: "https://github.com/timmyb824/kubernetes-apps.git"
      path: "gitops/manifests/immich"
      targetRevision: HEAD

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - ApplyOutOfSyncOnly=true
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-library-pvc
  namespace: immich
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 512Gi
  storageClassName: nfs-csi-synologynas
