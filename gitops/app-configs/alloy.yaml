apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: alloy
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations: {}
spec:
  destination:
    namespace: alloy
    server: "https://kubernetes.default.svc"
  project: default
  source:
    repoURL: https://grafana.github.io/helm-charts
    targetRevision: 0.11.0
    chart: alloy
    helm:
      releaseName: alloy
      values: |
        alloy:
          configMap:
              create: true
              content: |-
                  loki.write "default" {
                    endpoint {
                      url = "https://loki.local.timmybtech.com/loki/api/v1/push"
                    }
                    external_labels = {}
                  }

                  // SYSTEMS LOGS
                  local.file_match "node_logs" {
                    path_targets = [{
                        // Monitor syslog to scrape node-logs
                        __path__  = "/var/log/syslog",
                        job       = "node/syslog",
                        node_name = sys.env("HOSTNAME"),
                        cluster   = "k3s-cluster",
                    }]
                  }

                  loki.source.file "node_logs" {
                    targets    = local.file_match.node_logs.targets
                    forward_to = [loki.write.default.receiver]
                  }

                  // POD LOGS
                  // discovery.kubernetes "pod" {
                  //  role = "pod"
                  // }

                  discovery.kubernetes "pods" {
                    role = "pod"

                    selectors {
                      role  = "pod"
                      field = "spec.nodeName=" + coalesce(env("HOSTNAME"), constants.hostname)
                    }
                  }

                  discovery.relabel "pod_logs" {
                    targets = discovery.kubernetes.pod.targets

                    rule {
                      source_labels = ["__meta_kubernetes_namespace"]
                      action = "replace"
                      target_label = "namespace"
                    }

                    rule {
                      source_labels = ["__meta_kubernetes_pod_name"]
                      action = "replace"
                      target_label = "pod"
                    }

                    rule {
                      source_labels = ["__meta_kubernetes_pod_container_name"]
                      action = "replace"
                      target_label = "container"
                    }

                    rule {
                      source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                      action = "replace"
                      target_label = "app"
                    }

                    rule {
                      source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
                      action = "replace"
                      target_label = "job"
                      separator = "/"
                      replacement = "$1"
                    }

                    rule {
                      source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
                      action = "replace"
                      target_label = "__path__"
                      separator = "/"
                      replacement = "/var/log/pods/*$1/*.log"
                    }

                    rule {
                      source_labels = ["__meta_kubernetes_pod_container_id"]
                      action = "replace"
                      target_label = "container_runtime"
                      regex = "^(\\S+):\\/\\/.+$"
                      replacement = "$1"
                    }
                  }

                  loki.source.kubernetes "pod_logs" {
                    targets    = discovery.relabel.pod_logs.output
                    forward_to = [loki.process.pod_logs.receiver]
                  }

                  loki.process "pod_logs" {
                    stage.static_labels {
                        values = {
                          cluster = "k3s-cluster",
                        }
                    }

                    forward_to = [loki.write.default.receiver]
                  }

                  // CLUSTER EVENTS
                  loki.source.kubernetes_events "cluster_events" {
                    job_name   = "integrations/kubernetes/eventhandler"
                    log_format = "logfmt"
                    forward_to = [
                      loki.process.cluster_events.receiver,
                    ]
                  }

                  loki.process "cluster_events" {
                    forward_to = [loki.write.default.receiver]

                    stage.static_labels {
                      values = {
                        cluster = "k3s-cluster",
                      }
                    }

                    stage.labels {
                      values = {
                        kubernetes_cluster_events = "job",
                      }
                    }
                  }

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ApplyOutOfSync=true
