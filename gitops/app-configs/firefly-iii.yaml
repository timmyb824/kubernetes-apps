---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: firefly-iii
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  # annotations:
  #   avp.kubernetes.io/path: "secret/data/postgres_db"
spec:
  destination:
    namespace: firefly-iii
    server: "https://kubernetes.default.svc"
  project: default
  source:
    repoURL: https://firefly-iii.github.io/kubernetes/
    targetRevision: 1.8.1
    chart: firefly-iii
    helm:
      releaseName: firefly-iii
      values: |
          replicaCount: 1

          image:
            repository: "fireflyiii/core"
            pullPolicy: IfNotPresent
            tag: version-6.1.12

          imagePullSecrets: []
          nameOverride: ""
          fullnameOverride: ""

          persistence:
            # -- If you set this to false, uploaded attachments are not stored persistently and will be lost with every restart of the pod
            enabled: true
            storageClassName: "nfs-csi-synologynas"
            accessModes: ReadWriteOnce
            storage: 16Gi
            # -- If you want to use an existing claim, set it here
            existingClaim: ""

          # -- Environment variables for Firefly III. See docs at: https://github.com/firefly-iii/firefly-iii/blob/main/.env.example
          config:
            # -- Set this to the name of a secret to load environment variables from. If defined, values in the secret will override values in config.env
            existingSecret: ""

            # -- Set environment variables from configMaps or Secrets
            envValueFrom: {}

            # -- Directly defined environment variables. Use this for non-secret configuration values.
            env:
              DB_CONNECTION: pgsql
              DB_PORT: "5432"
              DB_DATABASE: firefly
              DB_HOST: <path:secret/data/postgres_db#HOST_IP>
              DB_USERNAME: <path:secret/data/postgres_db#USER>
              DEFAULT_LANGUAGE: "en_US"
              DEFAULT_LOCALE: "equal"
              TZ: "America/New_York"
              TRUSTED_PROXIES: "**"

          # -- Create a new Secret from values file to store sensitive environment variables. Make sure to keep your secrets encrypted in the repository! For example, you can use the 'helm secrets' plugin (https://github.com/jkroepke/helm-secrets) to encrypt and manage secrets. If the 'config.existingSecret' value is set, a new Secret will not be created.
          secrets:
            env:
              APP_PASSWORD: <path:secret/data/firefly#APP_PASSWORD>
              DB_PASSWORD: <path:secret/data/postgres_db#PASSWORD>
              APP_KEY: <path:secret/data/firefly#APP_KEY>

          # -- A cronjob for [recurring Firefly III tasks](https://docs.firefly-iii.org/firefly-iii/advanced-installation/cron/).
          cronjob:
            # -- Set to true to enable the CronJob. Note that you need to specify either cronjob.auth.existingSecret or cronjob.auth.token for it to actually be deployed.
            enabled: true

            # -- Authorization for the CronJob. See https://docs.firefly-iii.org/firefly-iii/advanced-installation/cron/#request-a-page-over-the-web
            auth:
              # -- The name of a secret containing a data.token field with the cronjob token
              existingSecret: ""

              # -- The name of the key in the existing secret to get the cronjob token from
              secretKey: "token"

              # -- The token in plain text
              # Docs: The [token] value can be found on your /profile under the "Command line token" header.
              # An alternative to this token value is the STATIC_CRON_TOKEN environment variable.
              token: <path:secret/data/firefly#FIREFLY_CRONJOB_TOKEN>

            # -- Annotations for the CronJob
            annotations: {}

            # -- When to run the CronJob. Defaults to 03:00 as this is when Firefly III executes regular tasks.
            schedule: "0 3 * * *"

            # -- How many pods to keep around for successful jobs
            successfulJobsHistoryLimit: 3

            # -- How many pods to keep around for failed jobs
            failedJobsHistoryLimit: 1

            # -- How to treat failed jobs
            restartPolicy: OnFailure

            image:
              repository: curlimages/curl
              pullPolicy: IfNotPresent
              tag: 7.81.0

            imagePullSecrets: []

            podAnnotations: {}

            securityContext: {}

            podSecurityContext: {}

            resources: {}

            nodeSelector: {}

            tolerations: []

            affinity: {}

          podAnnotations: {}

          podSecurityContext: {}
            # fsGroup: 2000

          securityContext: {}
            # capabilities:
            #   drop:
            #   - ALL
            # readOnlyRootFilesystem: true
            # runAsNonRoot: true
            # runAsUser: 1000

          service:
            type: ClusterIP
            port: 80

          ingress:
            enabled: false
            className: ""
            annotations: {}
              # kubernetes.io/ingress.class: nginx
              # kubernetes.io/tls-acme: "true"
            hosts:
              - chart-example.local
            tls: []
            #  - secretName: chart-example-tls
            #    hosts:
            #      - chart-example.local

          resources: {}
            # We usually recommend not to specify default resources and to leave this as a conscious
            # choice for the user. This also increases chances charts run on environments with little
            # resources, such as Minikube. If you do want to specify resources, uncomment the following
            # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
            # limits:
            #   cpu: 100m
            #   memory: 128Mi
            # requests:
            #   cpu: 100m
            #   memory: 128Mi

          autoscaling:
            enabled: false
            minReplicas: 1
            maxReplicas: 100
            targetCPUUtilizationPercentage: 80
            # targetMemoryUtilizationPercentage: 80

          nodeSelector: {}

          tolerations: []

          affinity: {}

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    # syncOptions:
    # - CreateNamespace=true
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: firefly-ingress
  namespace: firefly-iii
  annotations:
    kubernetes.io/ingress.class: traefik-external
    # argocd.argoproj.io/hook: Sync
    helm.sh/hook: "post-install"
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`firefly.local.timmybtech.com`)
      kind: Rule
      services:
        - name: firefly-iii
          port: 80
  tls:
    secretName: local-timmybtech-com-tls # or local-example-com-staging-tls
