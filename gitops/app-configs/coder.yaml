---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: coder
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    namespace: coder
    server: "https://kubernetes.default.svc"
  project: default
  source:
    repoURL: https://helm.coder.com/v2
    targetRevision: 0.1.0
    chart: coder-v2/coder
    helm:
      releaseName: coder
      values: |
        coder:
          # You can specify any environment variables you'd like to pass to Coder
          # here. Coder consumes environment variables listed in
          # `coder server --help`, and these environment variables are also passed
          # to the workspace provisioner (so you can consume them in your Terraform
          # templates for auth keys etc.).
          #
          # Please keep in mind that you should not set `CODER_HTTP_ADDRESS`,
          # `CODER_TLS_ENABLE`, `CODER_TLS_CERT_FILE` or `CODER_TLS_KEY_FILE` as
          # they are already set by the Helm chart and will cause conflicts.
          env:
            - name: CODER_PG_CONNECTION_URL
              valueFrom:
                secretKeyRef:
                  # You'll need to create a secret called coder-db-url with your
                  # Postgres connection URL like:
                  # postgres://coder:password@postgres:5432/coder?sslmode=disable
                  name: coder-db-url
                  key: url

            # (Optional) For production deployments the access URL should be set.
            # If you're just trying Coder, access the dashboard via the service IP.
            - name: CODER_ACCESS_URL
              value: "https://coder.timmybtech.com"

          #tls:
          #  secretNames:
          #    - my-tls-secret-name


  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: coder-ingress
  namespace: coder
  annotations:
    kubernetes.io/ingress.class: traefik-external
    helm.sh/hook: "post-install"
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`coder.local.timmybtech.com`)
      kind: Rule
      services:
        - name: coder
          port: 80
  tls:
    secretName: local-timmybtech-com-tls
---
apiVersion: v1
kind: Secret
metadata:
  namespace: coder
  annotations:
    avp.kubernetes.io/path: "secret/data/cloudflared"
    helm.sh/hook: "post-install"
  name: tunnel-credentials
type: Opaque
stringData:
  credentials.json: >-
    <CODER_CREDENTIALS>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: coder
  annotations:
    helm.sh/hook: "post-install"
spec:
  selector:
    matchLabels:
      app: cloudflared
  replicas: 2 # You could also consider elastic scaling for this deployment
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      containers:
      - name: cloudflared
        image: cloudflare/cloudflared:2022.12.1
        args:
        - tunnel
        # Points cloudflared to the config file, which configures what
        # cloudflared will actually do. This file is created by a ConfigMap
        # below.
        - --config
        - /etc/cloudflared/config/config.yaml
        - run
        livenessProbe:
          httpGet:
            # Cloudflared has a /ready endpoint which returns 200 if and only if
            # it has an active connection to the edge.
            path: /ready
            port: 2000
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: /etc/cloudflared/config
          readOnly: true
        # Each tunnel has an associated "credentials file" which authorizes machines
        # to run the tunnel. cloudflared will read this file from its local filesystem,
        # and it'll be stored in a k8s secret.
        - name: creds
          mountPath: /etc/cloudflared/creds
          readOnly: true
      volumes:
      - name: creds
        secret:
          # By default, the credentials file will be created under ~/.cloudflared/[tunnel ID].json
          # when you run `cloudflared tunnel create`. You can move it into a secret by using:
          # ```sh
          # kubectl create secret generic tunnel-credentials \
          # --from-file=credentials.json=/Users/yourusername/.cloudflared/[tunnel ID].json
          # ```
          secretName: tunnel-credentials
      # Create a config.yaml file from the ConfigMap below.
      - name: config
        configMap:
          name: cloudflared
          items:
          - key: config.yaml
            path: config.yaml
---
# This ConfigMap is just a way to define the cloudflared config.yaml file in k8s.
# It's useful to define it in k8s, rather than as a stand-alone .yaml file, because
# this lets you use various k8s templating solutions (e.g. Helm charts) to
# parameterize your config, instead of just using string literals.
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared
  namespace: coder
  annotations:
    helm.sh/hook: "post-install"
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: coder
    credentials-file: /etc/cloudflared/creds/credentials.json
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
    # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
    # recommend using autoupdate.
    no-autoupdate: true
    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    #
    # Remember, these rules route traffic from cloudflared to a local service. To route traffic
    # from the internet to cloudflared, run `cloudflared tunnel route dns [tunnel] [hostname]`.
    # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
    ingress:
    - hostname: coder.timmybtech.com
      service: http://coder.coder.svc.cluster.local:80
    # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
    - service: http_status:404
---
kind: Secret
apiVersion: v1
metadata:
  namespace: coder
  name: coder-db-url
  annotations:
    avp.kubernetes.io/path: "secret/data/postgres_db"
    helm.sh/hook: "post-install"
data:
  url: <BASE64_ENCODED_CODER_URL>
