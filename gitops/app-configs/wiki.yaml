---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: wiki
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  annotations:
    avp.kubernetes.io/path: "secret/data/postgres_db"
spec:
  destination:
    namespace: wiki
    server: "https://kubernetes.default.svc"
  project: default
  source:
    repoURL: https://charts.js.wiki
    targetRevision: 2.2.0
    chart: wiki
    helm:
      releaseName: wiki
      parameters:
      - name: "ingress.enabled"
        value: "false"

      - name: "postgresql.enabled"
        value: "false"

      - name: "postgresql.postgresqlHost"
        value: "<HOST_NAME>"

      - name: "postgresql.postgresqlUser"
        value: "<USER>"

      - name: "postgresql.postgresqlPassword"
        value: "<PASSWORD>"

      - name: "postgresql.postgresqlDatabase"
        value: "wiki"

      - name: "postgresql.postgresqlPort"
        value: "5432"

      - name: "postgresql.existingSecret"
        value: "wiki-postgresql-secret"

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
---
kind: Secret
apiVersion: v1
metadata:
  namespace: wiki
  name: wiki-postgresql-secret
  annotations:
    avp.kubernetes.io/path: "secret/data/postgres_db"
    helm.sh/hook: "post-install"
data:
  postgresql-password: <BASE64_ENCODED_PASSWORD>
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: wiki-ingress
  namespace: wiki
  annotations:
    kubernetes.io/ingress.class: traefik-external
    helm.sh/hook: "post-install"
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`wiki.local.timmybtech.com`)
      kind: Rule
      services:
        - name: wiki
          port: 80
  tls:
    secretName: local-timmybtech-com-tls
---
apiVersion: v1
kind: Secret
metadata:
  namespace: wiki
  annotations:
    avp.kubernetes.io/path: "secret/data/cloudflared"
    helm.sh/hook: "post-install"
  name: tunnel-credentials
type: Opaque
stringData:
  credentials.json: >-
    <WIKI_CREDENTIALS>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: wiki
  annotations:
    helm.sh/hook: "post-install"
spec:
  selector:
    matchLabels:
      app: cloudflared
  replicas: 2 # You could also consider elastic scaling for this deployment
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      containers:
      - name: cloudflared
        image: cloudflare/cloudflared:2023.10.0
        args:
        - tunnel
        # Points cloudflared to the config file, which configures what
        # cloudflared will actually do. This file is created by a ConfigMap
        # below.
        - --config
        - /etc/cloudflared/config/config.yaml
        - run
        livenessProbe:
          httpGet:
            # Cloudflared has a /ready endpoint which returns 200 if and only if
            # it has an active connection to the edge.
            path: /ready
            port: 2000
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: /etc/cloudflared/config
          readOnly: true
        # Each tunnel has an associated "credentials file" which authorizes machines
        # to run the tunnel. cloudflared will read this file from its local filesystem,
        # and it'll be stored in a k8s secret.
        - name: creds
          mountPath: /etc/cloudflared/creds
          readOnly: true
      volumes:
      - name: creds
        secret:
          # By default, the credentials file will be created under ~/.cloudflared/[tunnel ID].json
          # when you run `cloudflared tunnel create`. You can move it into a secret by using:
          # ```sh
          # kubectl create secret generic tunnel-credentials \
          # --from-file=credentials.json=/Users/yourusername/.cloudflared/[tunnel ID].json
          # ```
          secretName: tunnel-credentials
      # Create a config.yaml file from the ConfigMap below.
      - name: config
        configMap:
          name: cloudflared
          items:
          - key: config.yaml
            path: config.yaml
---
# This ConfigMap is just a way to define the cloudflared config.yaml file in k8s.
# It's useful to define it in k8s, rather than as a stand-alone .yaml file, because
# this lets you use various k8s templating solutions (e.g. Helm charts) to
# parameterize your config, instead of just using string literals.
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared
  namespace: wiki
  annotations:
    helm.sh/hook: "post-install"
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: wiki
    credentials-file: /etc/cloudflared/creds/credentials.json
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
    # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
    # recommend using autoupdate.
    no-autoupdate: true
    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    #
    # Remember, these rules route traffic from cloudflared to a local service. To route traffic
    # from the internet to cloudflared, run `cloudflared tunnel route dns [tunnel] [hostname]`.
    # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
    ingress:
    - hostname: wiki.timmybtech.com
      service: http://wiki.wiki.svc.cluster.local:80
    # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
    - service: http_status:404
