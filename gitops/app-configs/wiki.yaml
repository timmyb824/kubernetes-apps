apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: wiki
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  annotations:
    avp.kubernetes.io/path: "secret/data/postgres_db"
spec:
  destination:
    namespace: wiki
    server: "https://kubernetes.default.svc"
  project: default
  source:
    repoURL: https://charts.js.wiki
    targetRevision: 0.2.3
    chart: requarks/wiki
    helm:
      releaseName: wiki
      values: |
        # Default values for wiki.
        # This is a YAML-formatted file.
        # Declare variables to be passed into your templates.

        replicaCount: 1
        revisionHistoryLimit: 10

        image:
          repository: requarks/wiki
          imagePullPolicy: IfNotPresent

        imagePullSecrets: []
        nameOverride: ""
        fullnameOverride: ""

        serviceAccount:
          # Specifies whether a service account should be created
          create: true
          # Annotations to add to the service account
          annotations: {}
          # The name of the service account to use.
          # If not set and create is true, a name is generated using the fullname template
          name:

        livenessProbe:
          httpGet:
            path: /healthz
            port: http

        readinessProbe:
          httpGet:
            path: /healthz
            port: http

        startupProbe:
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 60
          httpGet:
            path: /healthz
            port: http

        podSecurityContext: {}
          # fsGroup: 2000

        securityContext: {}
          # capabilities:
          #   drop:
          #   - ALL
          # readOnlyRootFilesystem: true
          # runAsNonRoot: true
          # runAsUser: 1000

        service:
          type: ClusterIP
          port: 80
          # Annotations applied for services such as externalDNS or
          # service type LoadBalancer
          # type: LoadBalancer
          # httpsPort: 443
          # annotations: {}
          # loadBalancerIP: 172.16.0.1

        ingress:
          enabled: false
          className: ""
          annotations: {}
            # kubernetes.io/ingress.class: nginx
            # kubernetes.io/tls-acme: "true"
          hosts:
            - host: wiki.minikube.local
              paths:
                - path: "/"
                  pathType: Prefix

          tls: []
          #  - secretName: chart-example-tls
          #    hosts:
          #      - chart-example.local

        resources: {}
          # We usually recommend not to specify default resources and to leave this as a conscious
          # choice for the user. This also increases chances charts run on environments with little
          # resources, such as Minikube. If you do want to specify resources, uncomment the following
          # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
          # limits:
          #   cpu: 100m
          #   memory: 128Mi
          # requests:
          #   cpu: 100m
          #   memory: 128Mi

        nodeSelector: {}

        tolerations: []

        affinity: {}

        volumeMounts: []

        volumes: []

        # This will allow us to install locales even without internet access using a initContainer & Wiki.js "sideloading"
        sideload:
          enabled: false
          # Git-Repo containing all locales.json-files you need:
          repoURL: https://github.com/Requarks/wiki-localization

          ## This can be helpfull if you have internet access over a http proxy:
          env: []
          #  - name: HTTPS_PROXY
          #    value: http://my.proxy.com:3128

        ## Append extra trusted certificates for node process from extra volume via NODE_EXTRA_CA_CERTS variable
        # nodeExtraCaCerts: "/path/to/certs.pem"

        ## This will override the postgresql chart values
        externalPostgresql:
        #   # note: ?sslmode=require => ?ssl=true
          databaseURL: <URL>/wiki?ssl=true
        #   # For self signed CAs, like DigitalOcean
        #   NODE_TLS_REJECT_UNAUTHORIZED: "0"

        ## Configuration values for the postgresql dependency.
        ## ref: https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
        ##
        postgresql:
          ## Use the PostgreSQL chart dependency.
          ## Set to false if bringing your own PostgreSQL, and set secret value postgresql-uri.
          ##
          enabled: false
          ## ssl enforce SSL communication with PostgresSQL
          ## Default to false
          ##
          # ssl: false
          ## ca Certificate of Authority
          ## Default to empty, point to location of CA
          ##
          # ca: "path to ca"
          ## postgresqlHost override postgres database host
          ## Default to postgres
          ##
          # postgresqlHost: postgres
          ## postgresqlPort port for postgres
          ## Default to 5432
          ##
          # postgresqlPort: 5432
          ## PostgreSQL fullname Override
          ## Default to wiki-postgresql unless fullname override is set for Chart
          ##
          fullnameOverride: ""
          ## PostgreSQL User to create.
          ##
          postgresqlUser: postgres
          ## PostgreSQL Database to create.
          ##
          postgresqlDatabase: wiki
          ## Persistent Volume Storage configuration.
          ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes
          ##
          replication:
            ## Enable PostgreSQL replication (primary/secondary)
            ##
            enabled: false
          persistence:
            ## Enable PostgreSQL persistence using Persistent Volume Claims.
            ##
            enabled: false
            ## concourse data Persistent Volume Storage Class
            ## If defined, storageClassName: <storageClass>
            ## If set to "-", storageClassName: "", which disables dynamic provisioning
            ## If undefined (the default) or set to null, no storageClassName spec is
            ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
            ##   GKE, AWS & OpenStack)
            ##
            # storageClass: "-"
            ## Persistent Volume Access Mode.
            ##
            accessMode: ReadWriteOnce
            ## Persistent Volume Storage Size.
            ##
            size: 8Gi

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: wiki-ingress
  namespace: wiki
  annotations:
    kubernetes.io/ingress.class: traefik-external
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`wiki.local.timmybtech.com`)
      kind: Rule
      services:
        - name: wiki
          port: 80
  tls:
    secretName: local-timmybtech-com-tls
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    avp.kubernetes.io/path: "secret/data/cloudflared"
  name: tunnel-credentials
type: Opaque
stringData:
  credentials.json: >-
    <WIKI_CREDENTIALS>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: wiki
spec:
  selector:
    matchLabels:
      app: cloudflared
  replicas: 2 # You could also consider elastic scaling for this deployment
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      containers:
      - name: cloudflared
        image: cloudflare/cloudflared:2022.3.0
        args:
        - tunnel
        # Points cloudflared to the config file, which configures what
        # cloudflared will actually do. This file is created by a ConfigMap
        # below.
        - --config
        - /etc/cloudflared/config/config.yaml
        - run
        livenessProbe:
          httpGet:
            # Cloudflared has a /ready endpoint which returns 200 if and only if
            # it has an active connection to the edge.
            path: /ready
            port: 2000
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: /etc/cloudflared/config
          readOnly: true
        # Each tunnel has an associated "credentials file" which authorizes machines
        # to run the tunnel. cloudflared will read this file from its local filesystem,
        # and it'll be stored in a k8s secret.
        - name: creds
          mountPath: /etc/cloudflared/creds
          readOnly: true
      volumes:
      - name: creds
        secret:
          # By default, the credentials file will be created under ~/.cloudflared/<tunnel ID>.json
          # when you run `cloudflared tunnel create`. You can move it into a secret by using:
          # ```sh
          # kubectl create secret generic tunnel-credentials \
          # --from-file=credentials.json=/Users/yourusername/.cloudflared/<tunnel ID>.json
          # ```
          secretName: tunnel-credentials
      # Create a config.yaml file from the ConfigMap below.
      - name: config
        configMap:
          name: cloudflared
          items:
          - key: config.yaml
            path: config.yaml
---
# This ConfigMap is just a way to define the cloudflared config.yaml file in k8s.
# It's useful to define it in k8s, rather than as a stand-alone .yaml file, because
# this lets you use various k8s templating solutions (e.g. Helm charts) to
# parameterize your config, instead of just using string literals.
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared
  namespace: wiki
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: wiki
    credentials-file: /etc/cloudflared/creds/credentials.json
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
    # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
    # recommend using autoupdate.
    no-autoupdate: true
    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    #
    # Remember, these rules route traffic from cloudflared to a local service. To route traffic
    # from the internet to cloudflared, run `cloudflared tunnel route dns <tunnel> <hostname>`.
    # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
    ingress:
    - hostname: wiki.timmybtech.com
      service: http://wiki.wiki.svc.cluster.local:80
    # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
    - service: http_status:404
